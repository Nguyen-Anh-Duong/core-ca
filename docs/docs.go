// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ca/create": {
            "post": {
                "description": "Create a new Certificate Authority (CA) - either root CA or subordinate CA",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate Authority"
                ],
                "summary": "Create a new Certificate Authority",
                "parameters": [
                    {
                        "description": "CA creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateCARequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.CreateCAResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ca/crl": {
            "get": {
                "description": "Retrieve the current Certificate Revocation List",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/x-pem-file"
                ],
                "tags": [
                    "Certificate Authority"
                ],
                "summary": "Get Certificate Revocation List (CRL)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Certificate Authority ID",
                        "name": "ca_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PEM encoded CRL",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ca/issue": {
            "post": {
                "description": "Issue a new certificate from a Certificate Signing Request (CSR)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate Authority"
                ],
                "summary": "Issue a new certificate",
                "parameters": [
                    {
                        "description": "Certificate issuance request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CertificateIssueRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Certificate details with PEM data",
                        "schema": {
                            "$ref": "#/definitions/model.Certificate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ca/revoke": {
            "post": {
                "description": "Revoke a certificate by its serial number with a specified reason",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Certificate Authority"
                ],
                "summary": "Revoke a certificate",
                "parameters": [
                    {
                        "description": "Certificate revocation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CertificateRevokeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.CertificateRevokeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/keymanagement/generate": {
            "post": {
                "description": "Generate a new RSA key pair with the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key Management"
                ],
                "summary": "Generate a new key pair",
                "parameters": [
                    {
                        "description": "Key generation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.KeyGenerateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.KeyGenerateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/keymanagement/{id}": {
            "get": {
                "description": "Retrieve a key pair by its ID and return the public key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key Management"
                ],
                "summary": "Get a key pair by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.KeyGetResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.CertificateIssueRequest": {
            "type": "object",
            "required": [
                "ca_id",
                "csr"
            ],
            "properties": {
                "ca_id": {
                    "type": "integer",
                    "example": 1
                },
                "csr": {
                    "type": "string",
                    "example": "-----BEGIN CERTIFICATE REQUEST-----\nMIICgjCCAWoCAQAwPTELMAkGA1UEBhMCVk4xFDASBgNVBAoMC0V4YW1wbGUgT3JnMRgwFgYDVQQDDA93d3cuZXhhbXBsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC7ol+rgjOKsTGMvsQRssTJxEWbgK4TarhCt6OCg/WTYiY8+XOOOSvLzBaBCrKWudZSkiivlmoj+iwnhcX/ufJdErWGR1ANcF2x5o5kZ58I9IVdduJaHsN+dkJdNukpFzgvI4Hk6Tha88Hs5DyIcPVfU19zDX2oDpg3hvWb1F0EQOCE0+iV4eu4yUpNuEfemoRHFrE6Lo/4AAqTlhutyM0dvSOVaqcsgWY/9ioqdP1OWsxHHADKek5j70xd+uujAMgiozrapucPNK5YqC09BoQdAb84gGrvwM6jg9ytyYHK02/I0cpN08Q1+oSJVIKzOTSbJPvgSXdnElQ9aqsIX5GlAgMBAAGgADANBgkqhkiG9w0BAQsFAAOCAQEAIxXs09E/K2nhJMXoYoRmU4Fi67FWUYEAgI+KVQAJ/rrziUj4kqZ8T1Krq2FulapCPwBwMtpUCm4xAslGemvSfNOsbnDUmCp2RRZkeDbkYAgi2J3WLpPegWw4gnus/SWLrdaNudjoRJJIo1hcRot2Ia7VmACrMz9S9G/OjOUvF/6hKUsIiNIuM9muxUBkb2UX8YGxJQK8iEp1v0MRE/38TS5FFmgIOyWw4If/fqQak/fmiGM3rolvqU8btb0hfkM0bGPmNSUO5C1rphqIeA/5rUrdI6tryo+aqPg4lDORI2xV9C/egptl4hRPdMSGHVJrTSlfy4jkJ1LYkQyC+zYz8g==\n-----END CERTIFICATE REQUEST-----"
                }
            }
        },
        "main.CertificateRevokeRequest": {
            "type": "object",
            "required": [
                "reason",
                "serial_number"
            ],
            "properties": {
                "reason": {
                    "type": "string",
                    "example": "compromised"
                },
                "serial_number": {
                    "type": "string",
                    "example": "123456789"
                }
            }
        },
        "main.CertificateRevokeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Certificate revoked"
                }
            }
        },
        "main.CreateCARequest": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "MyRootCA"
                },
                "parent_ca_id": {
                    "type": "integer",
                    "example": 1
                },
                "type": {
                    "type": "string",
                    "example": "root"
                }
            }
        },
        "main.CreateCAResponse": {
            "type": "object",
            "properties": {
                "cert_pem": {
                    "type": "string",
                    "example": "-----BEGIN CERTIFICATE-----\n..."
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "message": {
                    "type": "string",
                    "example": "CA created successfully"
                },
                "name": {
                    "type": "string",
                    "example": "MyRootCA"
                },
                "type": {
                    "type": "string",
                    "example": "root"
                }
            }
        },
        "main.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request"
                }
            }
        },
        "main.KeyGenerateRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "my-key-id"
                }
            }
        },
        "main.KeyGenerateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "my-key-id"
                }
            }
        },
        "main.KeyGetResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "my-key-id"
                },
                "publicKey": {
                    "type": "string",
                    "example": "-----BEGIN RSA PUBLIC KEY-----\n..."
                }
            }
        },
        "model.Certificate": {
            "type": "object",
            "properties": {
                "ca_id": {
                    "description": "Gắn với CA nào",
                    "type": "integer"
                },
                "cert_pem": {
                    "description": "PEM-encoded cert",
                    "type": "string"
                },
                "not_after": {
                    "type": "string"
                },
                "not_before": {
                    "type": "string"
                },
                "serial_number": {
                    "type": "string"
                },
                "status": {
                    "description": "active, expired, revoked",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.CertificateStatus"
                        }
                    ]
                },
                "subject": {
                    "description": "CAKeyID      int    ` + "`" + `json:\"ca_key_id\"` + "`" + ` // Gắn với key nào\nUsage        []KeyUsage        ` + "`" + `json:\"usage\"` + "`" + `     // certSign, crlSign, ocspSign...",
                    "type": "string"
                }
            }
        },
        "model.CertificateStatus": {
            "type": "string",
            "enum": [
                "valid",
                "revoked",
                "expired",
                "unknown"
            ],
            "x-enum-varnames": [
                "StatusValid",
                "StatusRevoked",
                "StatusExpired",
                "StatusUnknown"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Core CA API",
	Description:      "Certificate Authority API for key management and certificate operations",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
